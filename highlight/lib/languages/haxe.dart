// GENERATED CODE - DO NOT MODIFY BY HAND

import '../src/mode.dart';
import '../src/common_modes.dart';

final haxe = Mode(refs: {}, aliases: [
  "hx"
], keywords: {
  "keyword": [
    'b',
    'r',
    'e',
    'a',
    'k',
    ' ',
    'c',
    'a',
    's',
    'e',
    ' ',
    'c',
    'a',
    's',
    't',
    ' ',
    'c',
    'a',
    't',
    'c',
    'h',
    ' ',
    'c',
    'o',
    'n',
    't',
    'i',
    'n',
    'u',
    'e',
    ' ',
    'd',
    'e',
    'f',
    'a',
    'u',
    'l',
    't',
    ' ',
    'd',
    'o',
    ' ',
    'd',
    'y',
    'n',
    'a',
    'm',
    'i',
    'c',
    ' ',
    'e',
    'l',
    's',
    'e',
    ' ',
    'e',
    'n',
    'u',
    'm',
    ' ',
    'e',
    'x',
    't',
    'e',
    'r',
    'n',
    ' ',
    'f',
    'o',
    'r',
    ' ',
    'f',
    'u',
    'n',
    'c',
    't',
    'i',
    'o',
    'n',
    ' ',
    'h',
    'e',
    'r',
    'e',
    ' ',
    'i',
    'f',
    ' ',
    'i',
    'm',
    'p',
    'o',
    'r',
    't',
    ' ',
    'i',
    'n',
    ' ',
    'i',
    'n',
    'l',
    'i',
    'n',
    'e',
    ' ',
    'n',
    'e',
    'v',
    'e',
    'r',
    ' ',
    'n',
    'e',
    'w',
    ' ',
    'o',
    'v',
    'e',
    'r',
    'r',
    'i',
    'd',
    'e',
    ' ',
    'p',
    'a',
    'c',
    'k',
    'a',
    'g',
    'e',
    ' ',
    'p',
    'r',
    'i',
    'v',
    'a',
    't',
    'e',
    ' ',
    'g',
    'e',
    't',
    ' ',
    's',
    'e',
    't',
    ' ',
    'p',
    'u',
    'b',
    'l',
    'i',
    'c',
    ' ',
    'r',
    'e',
    't',
    'u',
    'r',
    'n',
    ' ',
    's',
    't',
    'a',
    't',
    'i',
    'c',
    ' ',
    's',
    'u',
    'p',
    'e',
    'r',
    ' ',
    's',
    'w',
    'i',
    't',
    'c',
    'h',
    ' ',
    't',
    'h',
    'i',
    's',
    ' ',
    't',
    'h',
    'r',
    'o',
    'w',
    ' ',
    't',
    'r',
    'a',
    'c',
    'e',
    ' ',
    't',
    'r',
    'y',
    ' ',
    't',
    'y',
    'p',
    'e',
    'd',
    'e',
    'f',
    ' ',
    'u',
    'n',
    't',
    'y',
    'p',
    'e',
    'd',
    ' ',
    'u',
    's',
    'i',
    'n',
    'g',
    ' ',
    'v',
    'a',
    'r',
    ' ',
    'w',
    'h',
    'i',
    'l',
    'e',
    ' ',
    'I',
    'n',
    't',
    ' ',
    'F',
    'l',
    'o',
    'a',
    't',
    ' ',
    'S',
    't',
    'r',
    'i',
    'n',
    'g',
    ' ',
    'B',
    'o',
    'o',
    'l',
    ' ',
    'D',
    'y',
    'n',
    'a',
    'm',
    'i',
    'c',
    ' ',
    'V',
    'o',
    'i',
    'd',
    ' ',
    'A',
    'r',
    'r',
    'a',
    'y',
    ' ',
  ].join(),
  "built_in": [
    't',
    'r',
    'a',
    'c',
    'e',
    ' ',
    't',
    'h',
    'i',
    's',
  ].join(),
  "literal": [
    't',
    'r',
    'u',
    'e',
    ' ',
    'f',
    'a',
    'l',
    's',
    'e',
    ' ',
    'n',
    'u',
    'l',
    'l',
    ' ',
    '_',
  ].join()
}, contains: [
  Mode(className: "string", begin: "'", end: "'", contains: [
    BACKSLASH_ESCAPE,
    Mode(className: "subst", begin: "\\\$\\{", end: "\\}"),
    Mode(className: "subst", begin: "\\\$", end: "\\W}")
  ]),
  QUOTE_STRING_MODE,
  C_LINE_COMMENT_MODE,
  C_BLOCK_COMMENT_MODE,
  C_NUMBER_MODE,
  Mode(className: "meta", begin: "@:", end: "\$"),
  Mode(
      className: "meta",
      begin: "#",
      end: "\$",
      keywords: {"meta-keyword": "if else elseif end error"}),
  Mode(
      className: "type",
      begin: ":[ \t]*",
      end: "[^A-Za-z0-9_ \t\\->]",
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0),
  Mode(
      className: "type",
      begin: ":[ \t]*",
      end: "\\W",
      excludeBegin: true,
      excludeEnd: true),
  Mode(
      className: "type",
      begin: "new *",
      end: "\\W",
      excludeBegin: true,
      excludeEnd: true),
  Mode(
      className: "class",
      beginKeywords: "enum",
      end: "\\{",
      contains: [TITLE_MODE]),
  Mode(
      className: "class",
      beginKeywords: "abstract",
      end: "[\\{\$]",
      contains: [
        Mode(
            className: "type",
            begin: "\\(",
            end: "\\)",
            excludeBegin: true,
            excludeEnd: true),
        Mode(
            className: "type",
            begin: "from +",
            end: "\\W",
            excludeBegin: true,
            excludeEnd: true),
        Mode(
            className: "type",
            begin: "to +",
            end: "\\W",
            excludeBegin: true,
            excludeEnd: true),
        TITLE_MODE
      ],
      keywords: {
        "keyword": [
          'a',
          'b',
          's',
          't',
          'r',
          'a',
          'c',
          't',
          ' ',
          'f',
          'r',
          'o',
          'm',
          ' ',
          't',
          'o',
        ].join()
      }),
  Mode(
      className: "class",
      begin: "\\b(class|interface) +",
      end: "[\\{\$]",
      excludeEnd: true,
      keywords: [
        'c',
        'l',
        'a',
        's',
        's',
        ' ',
        'i',
        'n',
        't',
        'e',
        'r',
        'f',
        'a',
        'c',
        'e',
      ].join(),
      contains: [
        Mode(
            className: "keyword",
            begin: "\\b(extends|implements) +",
            keywords: [
              'e',
              'x',
              't',
              'e',
              'n',
              'd',
              's',
              ' ',
              'i',
              'm',
              'p',
              'l',
              'e',
              'm',
              'e',
              'n',
              't',
              's',
            ].join(),
            contains: [
              Mode(className: "type", begin: "[a-zA-Z]\\w*", relevance: 0)
            ]),
        TITLE_MODE
      ]),
  Mode(
      className: "function",
      beginKeywords: "function",
      end: "\\(",
      excludeEnd: true,
      illegal: "\\S",
      contains: [TITLE_MODE])
], illegal: "<\\/");
