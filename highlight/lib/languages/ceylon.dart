// GENERATED CODE - DO NOT MODIFY BY HAND

import '../src/mode.dart';
import '../src/common_modes.dart';

final ceylon = Mode(
    refs: {
      [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '4',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '0',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '3',
      ].join(): Mode(
          className: "number",
          begin:
              "#[0-9a-fA-F_]+|\\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",
          relevance: 0),
      [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '4',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '0',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '2',
      ].join(): Mode(className: "string", begin: "'", end: "'"),
      [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '4',
      ].join(): Mode(className: "string", begin: "\"", end: "\"", contains: [
        Mode(
            className: "subst",
            excludeBegin: true,
            excludeEnd: true,
            begin: "``",
            end: "``",
            keywords: [
              'a',
              's',
              's',
              'e',
              'm',
              'b',
              'l',
              'y',
              ' ',
              'm',
              'o',
              'd',
              'u',
              'l',
              'e',
              ' ',
              'p',
              'a',
              'c',
              'k',
              'a',
              'g',
              'e',
              ' ',
              'i',
              'm',
              'p',
              'o',
              'r',
              't',
              ' ',
              'a',
              'l',
              'i',
              'a',
              's',
              ' ',
              'c',
              'l',
              'a',
              's',
              's',
              ' ',
              'i',
              'n',
              't',
              'e',
              'r',
              'f',
              'a',
              'c',
              'e',
              ' ',
              'o',
              'b',
              'j',
              'e',
              'c',
              't',
              ' ',
              'g',
              'i',
              'v',
              'e',
              'n',
              ' ',
              'v',
              'a',
              'l',
              'u',
              'e',
              ' ',
              'a',
              's',
              's',
              'i',
              'g',
              'n',
              ' ',
              'v',
              'o',
              'i',
              'd',
              ' ',
              'f',
              'u',
              'n',
              'c',
              't',
              'i',
              'o',
              'n',
              ' ',
              'n',
              'e',
              'w',
              ' ',
              'o',
              'f',
              ' ',
              'e',
              'x',
              't',
              'e',
              'n',
              'd',
              's',
              ' ',
              's',
              'a',
              't',
              'i',
              's',
              'f',
              'i',
              'e',
              's',
              ' ',
              'a',
              'b',
              's',
              't',
              'r',
              'a',
              'c',
              't',
              's',
              ' ',
              'i',
              'n',
              ' ',
              'o',
              'u',
              't',
              ' ',
              'r',
              'e',
              't',
              'u',
              'r',
              'n',
              ' ',
              'b',
              'r',
              'e',
              'a',
              'k',
              ' ',
              'c',
              'o',
              'n',
              't',
              'i',
              'n',
              'u',
              'e',
              ' ',
              't',
              'h',
              'r',
              'o',
              'w',
              ' ',
              'a',
              's',
              's',
              'e',
              'r',
              't',
              ' ',
              'd',
              'y',
              'n',
              'a',
              'm',
              'i',
              'c',
              ' ',
              'i',
              'f',
              ' ',
              'e',
              'l',
              's',
              'e',
              ' ',
              's',
              'w',
              'i',
              't',
              'c',
              'h',
              ' ',
              'c',
              'a',
              's',
              'e',
              ' ',
              'f',
              'o',
              'r',
              ' ',
              'w',
              'h',
              'i',
              'l',
              'e',
              ' ',
              't',
              'r',
              'y',
              ' ',
              'c',
              'a',
              't',
              'c',
              'h',
              ' ',
              'f',
              'i',
              'n',
              'a',
              'l',
              'l',
              'y',
              ' ',
              't',
              'h',
              'e',
              'n',
              ' ',
              'l',
              'e',
              't',
              ' ',
              't',
              'h',
              'i',
              's',
              ' ',
              'o',
              'u',
              't',
              'e',
              'r',
              ' ',
              's',
              'u',
              'p',
              'e',
              'r',
              ' ',
              'i',
              's',
              ' ',
              'e',
              'x',
              'i',
              's',
              't',
              's',
              ' ',
              'n',
              'o',
              'n',
              'e',
              'm',
              'p',
              't',
              'y',
            ].join(),
            relevance: 10,
            contains: [
              Mode(
                  ref: [
                '~',
                'c',
                'o',
                'n',
                't',
                'a',
                'i',
                'n',
                's',
                '~',
                '3',
              ].join()),
              Mode(
                  ref: [
                '~',
                'c',
                'o',
                'n',
                't',
                'a',
                'i',
                'n',
                's',
                '~',
                '4',
              ].join()),
              Mode(
                  ref: [
                '~',
                'c',
                'o',
                'n',
                't',
                'a',
                'i',
                'n',
                's',
                '~',
                '4',
                '~',
                'c',
                'o',
                'n',
                't',
                'a',
                'i',
                'n',
                's',
                '~',
                '0',
                '~',
                'c',
                'o',
                'n',
                't',
                'a',
                'i',
                'n',
                's',
                '~',
                '2',
              ].join()),
              Mode(
                  ref: [
                '~',
                'c',
                'o',
                'n',
                't',
                'a',
                'i',
                'n',
                's',
                '~',
                '4',
                '~',
                'c',
                'o',
                'n',
                't',
                'a',
                'i',
                'n',
                's',
                '~',
                '0',
                '~',
                'c',
                'o',
                'n',
                't',
                'a',
                'i',
                'n',
                's',
                '~',
                '3',
              ].join())
            ])
      ]),
      [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '3',
      ].join(): Mode(
          className: "string", begin: "\"\"\"", end: "\"\"\"", relevance: 10),
    },
    keywords: {
      "keyword": [
        'assembly',
        'module',
        'package',
        'import',
        'alias',
        'class',
        'interface',
        'object',
        'given',
        'value',
        'assign',
        'void',
        'function',
        'new',
        'of',
        'extends',
        'satisfies',
        'abstracts',
        'in',
        'out',
        'return',
        'break',
        'continue',
        'throw',
        'assert',
        'dynamic',
        'if',
        'else',
        'switch',
        'case',
        'for',
        'while',
        'try',
        'catch',
        'finally',
        'then',
        'let',
        'this',
        'outer',
        'super',
        'is',
        'exists',
        'nonempty',
        'shared',
        'abstract',
        'formal',
        'default',
        'actual',
        'variable',
        'late',
        'native',
        'deprecatedfinal',
        'sealed',
        'annotation',
        'suppressWarnings',
        'small',
      ].join(),
      "meta": "doc by license see throws tagged"
    },
    illegal: "\\\$[^01]|#[^0-9a-fA-F]",
    contains: [
      C_LINE_COMMENT_MODE,
      Mode(className: "comment", begin: "/\\*", end: "\\*/", contains: [
        Mode(self: true),
        PHRASAL_WORDS_MODE,
        Mode(
            className: "doctag",
            begin: "(?:TODO|FIXME|NOTE|BUG|XXX):",
            relevance: 0)
      ]),
      Mode(className: "meta", begin: "@[a-z]\\w*(?:\\:\"[^\"]*\")?"),
      Mode(
          ref: [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '3',
      ].join()),
      Mode(
          ref: [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '4',
      ].join()),
      Mode(
          ref: [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '4',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '0',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '2',
      ].join()),
      Mode(
          ref: [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '4',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '0',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '3',
      ].join())
    ]);
