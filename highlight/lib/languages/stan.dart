// GENERATED CODE - DO NOT MODIFY BY HAND

import '../src/mode.dart';
import '../src/common_modes.dart';

final stan = Mode(
    refs: {},
    aliases: ["stanfuncs"],
    keywords: {
      "title":
          "functions model data parameters quantities transformed generated",
      "keyword":
          "integrate_ode_bdf|10 row_vector algebra_solver for continue cholesky_factor_corr|10 simplex while in integrate_ode|10 int unit_vector cholesky_factor_cov|10 void vector positive_ordered matrix else cov_matrix|10 return integrate_ode_rk45|10 ordered if reject break corr_matrix|10 print real increment_log_prob|10",
      "built_in":
          "cumulative_sum csr_extract_v student_t_cdf chi_square_cdf scaled_inv_chi_square_cdf categorical_rng gumbel_lpdf uniform_lpdf print is_inf qr_Q size trigamma diagonal fmax wishart_rng rows_dot_product beta_lpdf tanh cov_exp_quad uniform_rng sub_row quad_form sub_col cbrt singular_values to_row_vector sqrt2 erfc pareto_lcdf round mdivide_right_tri_low bernoulli_lccdf pareto_rng exp_mod_normal_lccdf normal_lcdf gamma_lcdf target gamma_p get_lp exponential_cdf gumbel_lcdf dirichlet_rng machine_precision e rows_dot_self skew_normal_rng binomial_lpmf student_t_lpdf append_row bernoulli_cdf rep_row_vector columns_dot_product trunc trace_gen_quad_form lognormal_rng pi gumbel_cdf bessel_first_kind variance binomial_rng gamma_q pareto_type_2_lccdf sin is_nan uniform_cdf cholesky_decompose log1m_exp eigenvectors_sym poisson_lpmf prod lbeta normal_rng pareto_lpdf sort_desc fmin chi_square_lpdf neg_binomial_lcdf max csr_to_dense_matrix mean rank lkj_corr_cholesky_lpdf Phi csr_extract_u normal_lpdf trace multi_gp_lpdf eigenvalues_sym log2 sqrt atan log1m_inv_logit multi_normal_rng neg_binomial_2_log_lpmf lkj_corr_cholesky_rng binomial_logit_lpmf pareto_lccdf inv_gamma_lccdf tail cols ordered_logistic_rng integrate_ode cauchy_rng exp_mod_normal_lcdf rep_matrix fabs lmgamma col binomial_lcdf choose beta_rng wiener_lpdf append_col owens_t gumbel_lccdf frechet_lpdf inverse multi_normal_cholesky_lpdf pareto_type_2_cdf csr_matrix_times_vector lognormal_lcdf sort_asc segment categorical_logit_rng multinomial_rng exponential_lccdf logistic_cdf quad_form_diag determinant chi_square_lccdf diag_pre_multiply lognormal_cdf exponential_lpdf rayleigh_lpdf pareto_type_2_lpdf qr_R sort_indices_asc poisson_cdf student_t_lcdf append_array multi_student_t_rng weibull_lcdf matrix_exp beta_binomial_lcdf multiply_log uniform_lccdf multi_normal_lpdf skew_normal_lcdf sum lgamma double_exponential_rng neg_binomial_2_log_rng normal_cdf cauchy_lpdf positive_infinity num_elements weibull_cdf log1p pareto_cdf multi_gp_cholesky_lpdf log1m inv_chi_square_lcdf von_mises_rng log_inv_logit atan2 asin binary_log_loss rayleigh_lcdf pow neg_binomial_cdf tgamma chi_square_lcdf poisson_lccdf log_diff_exp Phi_approx neg_binomial_2_rng cauchy_cdf pareto_type_2_rng cos log_determinant lkj_corr_lpdf modified_bessel_first_kind mdivide_left_spd to_array_2d inv_chi_square_cdf sd diag_matrix inv_chi_square_lccdf lkj_corr_rng binomial_coefficient_log neg_binomial_rng min dirichlet_lpdf cauchy_lcdf normal_lccdf hypergeometric_lpmf exponential_rng student_t_rng rising_factorial multi_normal_cholesky_rng square multiply_lower_tri_self_transpose squared_distance student_t_lccdf scaled_inv_chi_square_rng algebra_solver wishart_lpdf weibull_lccdf skew_normal_lpdf head erf exp_mod_normal_lpdf frechet_lcdf neg_binomial_2_lccdf expm1 csr_extract_w negative_infinity lognormal_lpdf sort_indices_desc quad_form_sym scaled_inv_chi_square_lcdf diag_post_multiply rayleigh_lccdf categorical_lpmf inv_wishart_rng neg_binomial_2_lcdf rayleigh_rng binomial_cdf beta_binomial_lpmf multinomial_lpmf integrate_ode_bdf gamma_rng atanh logistic_lpdf ceil fmod gamma_cdf double_exponential_lpdf mdivide_left_tri_low log_falling_factorial columns_dot_self crossprod falling_factorial poisson_rng pareto_type_2_lcdf bernoulli_lpmf modified_bessel_second_kind log1p_exp abs exp_mod_normal_cdf mdivide_right_spd frechet_rng to_array_1d log_softmax bernoulli_lcdf step gamma_lccdf trace_quad_form lchoose distance weibull_lpdf acosh poisson_log_lpmf poisson_log_rng skew_normal_cdf logistic_lccdf log_mix neg_binomial_2_cdf poisson_lcdf cauchy_lccdf double_exponential_cdf scaled_inv_chi_square_lpdf logistic_rng inc_beta inv_square rep_array rows frechet_lccdf dot_self log not_a_number exp2 inv_gamma_lcdf beta_binomial_rng cosh to_matrix bernoulli_logit_rng neg_binomial_lccdf neg_binomial_2_lpmf von_mises_lpdf gumbel_rng tan dims softmax logistic_lcdf logit sinh skew_normal_lccdf scaled_inv_chi_square_lccdf exponential_lcdf exp gaussian_dlm_obs_lpdf log_rising_factorial chi_square_rng rep_vector double_exponential_lccdf beta_binomial_cdf asinh reject neg_binomial_lpmf multi_student_t_lpdf fma tcrossprod ordered_logistic_lpmf inv_chi_square_rng rayleigh_cdf frechet_cdf acos double_exponential_lcdf inv_sqrt exp_mod_normal_rng multi_normal_prec_lpdf to_vector bernoulli_logit_lpmf bessel_second_kind bernoulli_rng weibull_rng lognormal_lccdf log_sum_exp digamma hypergeometric_rng beta_binomial_lccdf beta_lccdf beta_cdf beta_lcdf categorical_logit_lpmf block floor binomial_lccdf inv_logit inv_gamma_lpdf gamma_lpdf inverse_spd fdim inv inv_Phi inv_gamma_cdf hypot log10 inv_chi_square_lpdf inv_wishart_lpdf lmultiply integrate_ode_rk45 inv_gamma_rng int_step inv_cloglog dot_product uniform_lcdf row"
    },
    lexemes: "[a-zA-Z]\\w*",
    contains: [
      C_LINE_COMMENT_MODE,
      Mode(
          className: "comment",
          begin: "#",
          end: "\$",
          contains: [
            PHRASAL_WORDS_MODE,
            Mode(
                className: "doctag",
                begin: "(?:TODO|FIXME|NOTE|BUG|XXX):",
                relevance: 0)
          ],
          relevance: 0,
          keywords: {"meta-keyword": "include"}),
      Mode(
          className: "comment",
          begin: "\\/\\*",
          end: "\\*\\/",
          contains: [
            Mode(className: "doctag", begin: "@(return|param)"),
            PHRASAL_WORDS_MODE,
            Mode(
                className: "doctag",
                begin: "(?:TODO|FIXME|NOTE|BUG|XXX):",
                relevance: 0)
          ],
          relevance: 0),
      Mode(
          begin: "<\\s*lower\\s*=",
          keywords: [
            'l',
            'o',
            'w',
            'e',
            'r',
          ].join()),
      Mode(
          begin: "[<,]*upper\\s*=",
          keywords: [
            'u',
            'p',
            'p',
            'e',
            'r',
          ].join()),
      Mode(className: "keyword", begin: "\\btarget\\s*\\+=", relevance: 10),
      Mode(
          begin: "\\x7e\\s*([a-zA-Z]\\w*)\\s*\\(",
          keywords: [
            'b',
            'e',
            'r',
            'n',
            'o',
            'u',
            'l',
            'l',
            'i',
            ' ',
            'b',
            'e',
            'r',
            'n',
            'o',
            'u',
            'l',
            'l',
            'i',
            '_',
            'l',
            'o',
            'g',
            'i',
            't',
            ' ',
            'b',
            'e',
            't',
            'a',
            ' ',
            'b',
            'e',
            't',
            'a',
            '_',
            'b',
            'i',
            'n',
            'o',
            'm',
            'i',
            'a',
            'l',
            ' ',
            'b',
            'i',
            'n',
            'o',
            'm',
            'i',
            'a',
            'l',
            ' ',
            'b',
            'i',
            'n',
            'o',
            'm',
            'i',
            'a',
            'l',
            '_',
            'l',
            'o',
            'g',
            'i',
            't',
            ' ',
            'c',
            'a',
            't',
            'e',
            'g',
            'o',
            'r',
            'i',
            'c',
            'a',
            'l',
            ' ',
            'c',
            'a',
            't',
            'e',
            'g',
            'o',
            'r',
            'i',
            'c',
            'a',
            'l',
            '_',
            'l',
            'o',
            'g',
            'i',
            't',
            ' ',
            'c',
            'a',
            'u',
            'c',
            'h',
            'y',
            ' ',
            'c',
            'h',
            'i',
            '_',
            's',
            'q',
            'u',
            'a',
            'r',
            'e',
            ' ',
            'd',
            'i',
            'r',
            'i',
            'c',
            'h',
            'l',
            'e',
            't',
            ' ',
            'd',
            'o',
            'u',
            'b',
            'l',
            'e',
            '_',
            'e',
            'x',
            'p',
            'o',
            'n',
            'e',
            'n',
            't',
            'i',
            'a',
            'l',
            ' ',
            'e',
            'x',
            'p',
            '_',
            'm',
            'o',
            'd',
            '_',
            'n',
            'o',
            'r',
            'm',
            'a',
            'l',
            ' ',
            'e',
            'x',
            'p',
            'o',
            'n',
            'e',
            'n',
            't',
            'i',
            'a',
            'l',
            ' ',
            'f',
            'r',
            'e',
            'c',
            'h',
            'e',
            't',
            ' ',
            'g',
            'a',
            'm',
            'm',
            'a',
            ' ',
            'g',
            'a',
            'u',
            's',
            's',
            'i',
            'a',
            'n',
            '_',
            'd',
            'l',
            'm',
            '_',
            'o',
            'b',
            's',
            ' ',
            'g',
            'u',
            'm',
            'b',
            'e',
            'l',
            ' ',
            'h',
            'y',
            'p',
            'e',
            'r',
            'g',
            'e',
            'o',
            'm',
            'e',
            't',
            'r',
            'i',
            'c',
            ' ',
            'i',
            'n',
            'v',
            '_',
            'c',
            'h',
            'i',
            '_',
            's',
            'q',
            'u',
            'a',
            'r',
            'e',
            ' ',
            'i',
            'n',
            'v',
            '_',
            'g',
            'a',
            'm',
            'm',
            'a',
            ' ',
            'i',
            'n',
            'v',
            '_',
            'w',
            'i',
            's',
            'h',
            'a',
            'r',
            't',
            ' ',
            'l',
            'k',
            'j',
            '_',
            'c',
            'o',
            'r',
            'r',
            ' ',
            'l',
            'k',
            'j',
            '_',
            'c',
            'o',
            'r',
            'r',
            '_',
            'c',
            'h',
            'o',
            'l',
            'e',
            's',
            'k',
            'y',
            ' ',
            'l',
            'o',
            'g',
            'i',
            's',
            't',
            'i',
            'c',
            ' ',
            'l',
            'o',
            'g',
            'n',
            'o',
            'r',
            'm',
            'a',
            'l',
            ' ',
            'm',
            'u',
            'l',
            't',
            'i',
            '_',
            'g',
            'p',
            ' ',
            'm',
            'u',
            'l',
            't',
            'i',
            '_',
            'g',
            'p',
            '_',
            'c',
            'h',
            'o',
            'l',
            'e',
            's',
            'k',
            'y',
            ' ',
            'm',
            'u',
            'l',
            't',
            'i',
            '_',
            'n',
            'o',
            'r',
            'm',
            'a',
            'l',
            ' ',
            'm',
            'u',
            'l',
            't',
            'i',
            '_',
            'n',
            'o',
            'r',
            'm',
            'a',
            'l',
            '_',
            'c',
            'h',
            'o',
            'l',
            'e',
            's',
            'k',
            'y',
            ' ',
            'm',
            'u',
            'l',
            't',
            'i',
            '_',
            'n',
            'o',
            'r',
            'm',
            'a',
            'l',
            '_',
            'p',
            'r',
            'e',
            'c',
            ' ',
            'm',
            'u',
            'l',
            't',
            'i',
            '_',
            's',
            't',
            'u',
            'd',
            'e',
            'n',
            't',
            '_',
            't',
            ' ',
            'm',
            'u',
            'l',
            't',
            'i',
            'n',
            'o',
            'm',
            'i',
            'a',
            'l',
            ' ',
            'n',
            'e',
            'g',
            '_',
            'b',
            'i',
            'n',
            'o',
            'm',
            'i',
            'a',
            'l',
            ' ',
            'n',
            'e',
            'g',
            '_',
            'b',
            'i',
            'n',
            'o',
            'm',
            'i',
            'a',
            'l',
            '_',
            '2',
            ' ',
            'n',
            'e',
            'g',
            '_',
            'b',
            'i',
            'n',
            'o',
            'm',
            'i',
            'a',
            'l',
            '_',
            '2',
            '_',
            'l',
            'o',
            'g',
            ' ',
            'n',
            'o',
            'r',
            'm',
            'a',
            'l',
            ' ',
            'o',
            'r',
            'd',
            'e',
            'r',
            'e',
            'd',
            '_',
            'l',
            'o',
            'g',
            'i',
            's',
            't',
            'i',
            'c',
            ' ',
            'p',
            'a',
            'r',
            'e',
            't',
            'o',
            ' ',
            'p',
            'a',
            'r',
            'e',
            't',
            'o',
            '_',
            't',
            'y',
            'p',
            'e',
            '_',
            '2',
            ' ',
            'p',
            'o',
            'i',
            's',
            's',
            'o',
            'n',
            ' ',
            'p',
            'o',
            'i',
            's',
            's',
            'o',
            'n',
            '_',
            'l',
            'o',
            'g',
            ' ',
            'r',
            'a',
            'y',
            'l',
            'e',
            'i',
            'g',
            'h',
            ' ',
            's',
            'c',
            'a',
            'l',
            'e',
            'd',
            '_',
            'i',
            'n',
            'v',
            '_',
            'c',
            'h',
            'i',
            '_',
            's',
            'q',
            'u',
            'a',
            'r',
            'e',
            ' ',
            's',
            'k',
            'e',
            'w',
            '_',
            'n',
            'o',
            'r',
            'm',
            'a',
            'l',
            ' ',
            's',
            't',
            'u',
            'd',
            'e',
            'n',
            't',
            '_',
            't',
            ' ',
            'u',
            'n',
            'i',
            'f',
            'o',
            'r',
            'm',
            ' ',
            'v',
            'o',
            'n',
            '_',
            'm',
            'i',
            's',
            'e',
            's',
            ' ',
            'w',
            'e',
            'i',
            'b',
            'u',
            'l',
            'l',
            ' ',
            'w',
            'i',
            'e',
            'n',
            'e',
            'r',
            ' ',
            'w',
            'i',
            's',
            'h',
            'a',
            'r',
            't',
          ].join()),
      Mode(
          className: "number",
          variants: [
            Mode(begin: "\\b\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?"),
            Mode(begin: "\\.\\d+(?:[eE][+-]?\\d+)?\\b")
          ],
          relevance: 0),
      Mode(className: "string", begin: "\"", end: "\"", relevance: 0)
    ]);
