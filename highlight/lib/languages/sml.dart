// GENERATED CODE - DO NOT MODIFY BY HAND

import '../src/mode.dart';
import '../src/common_modes.dart';

final sml = Mode(
    refs: {},
    aliases: ["ml"],
    keywords: {
      "keyword": [
        'a',
        'b',
        's',
        't',
        'y',
        'p',
        'e',
        ' ',
        'a',
        'n',
        'd',
        ' ',
        'a',
        'n',
        'd',
        'a',
        'l',
        's',
        'o',
        ' ',
        'a',
        's',
        ' ',
        'c',
        'a',
        's',
        'e',
        ' ',
        'd',
        'a',
        't',
        'a',
        't',
        'y',
        'p',
        'e',
        ' ',
        'd',
        'o',
        ' ',
        'e',
        'l',
        's',
        'e',
        ' ',
        'e',
        'n',
        'd',
        ' ',
        'e',
        'q',
        't',
        'y',
        'p',
        'e',
        ' ',
        'e',
        'x',
        'c',
        'e',
        'p',
        't',
        'i',
        'o',
        'n',
        ' ',
        'f',
        'n',
        ' ',
        'f',
        'u',
        'n',
        ' ',
        'f',
        'u',
        'n',
        'c',
        't',
        'o',
        'r',
        ' ',
        'h',
        'a',
        'n',
        'd',
        'l',
        'e',
        ' ',
        'i',
        'f',
        ' ',
        'i',
        'n',
        ' ',
        'i',
        'n',
        'c',
        'l',
        'u',
        'd',
        'e',
        ' ',
        'i',
        'n',
        'f',
        'i',
        'x',
        ' ',
        'i',
        'n',
        'f',
        'i',
        'x',
        'r',
        ' ',
        'l',
        'e',
        't',
        ' ',
        'l',
        'o',
        'c',
        'a',
        'l',
        ' ',
        'n',
        'o',
        'n',
        'f',
        'i',
        'x',
        ' ',
        'o',
        'f',
        ' ',
        'o',
        'p',
        ' ',
        'o',
        'p',
        'e',
        'n',
        ' ',
        'o',
        'r',
        'e',
        'l',
        's',
        'e',
        ' ',
        'r',
        'a',
        'i',
        's',
        'e',
        ' ',
        'r',
        'e',
        'c',
        ' ',
        's',
        'h',
        'a',
        'r',
        'i',
        'n',
        'g',
        ' ',
        's',
        'i',
        'g',
        ' ',
        's',
        'i',
        'g',
        'n',
        'a',
        't',
        'u',
        'r',
        'e',
        ' ',
        's',
        't',
        'r',
        'u',
        'c',
        't',
        ' ',
        's',
        't',
        'r',
        'u',
        'c',
        't',
        'u',
        'r',
        'e',
        ' ',
        't',
        'h',
        'e',
        'n',
        ' ',
        't',
        'y',
        'p',
        'e',
        ' ',
        'v',
        'a',
        'l',
        ' ',
        'w',
        'i',
        't',
        'h',
        ' ',
        'w',
        'i',
        't',
        'h',
        't',
        'y',
        'p',
        'e',
        ' ',
        'w',
        'h',
        'e',
        'r',
        'e',
        ' ',
        'w',
        'h',
        'i',
        'l',
        'e',
      ].join(),
      "built_in": [
        'a',
        'r',
        'r',
        'a',
        'y',
        ' ',
        'b',
        'o',
        'o',
        'l',
        ' ',
        'c',
        'h',
        'a',
        'r',
        ' ',
        'e',
        'x',
        'n',
        ' ',
        'i',
        'n',
        't',
        ' ',
        'l',
        'i',
        's',
        't',
        ' ',
        'o',
        'p',
        't',
        'i',
        'o',
        'n',
        ' ',
        'o',
        'r',
        'd',
        'e',
        'r',
        ' ',
        'r',
        'e',
        'a',
        'l',
        ' ',
        'r',
        'e',
        'f',
        ' ',
        's',
        't',
        'r',
        'i',
        'n',
        'g',
        ' ',
        's',
        'u',
        'b',
        's',
        't',
        'r',
        'i',
        'n',
        'g',
        ' ',
        'v',
        'e',
        'c',
        't',
        'o',
        'r',
        ' ',
        'u',
        'n',
        'i',
        't',
        ' ',
        'w',
        'o',
        'r',
        'd',
      ].join(),
      "literal": [
        't',
        'r',
        'u',
        'e',
        ' ',
        'f',
        'a',
        'l',
        's',
        'e',
        ' ',
        'N',
        'O',
        'N',
        'E',
        ' ',
        'S',
        'O',
        'M',
        'E',
        ' ',
        'L',
        'E',
        'S',
        'S',
        ' ',
        'E',
        'Q',
        'U',
        'A',
        'L',
        ' ',
        'G',
        'R',
        'E',
        'A',
        'T',
        'E',
        'R',
        ' ',
        'n',
        'i',
        'l',
      ].join()
    },
    illegal: "\\/\\/|>>",
    lexemes: "[a-z_]\\w*!?",
    contains: [
      Mode(className: "literal", begin: "\\[(\\|\\|)?\\]|\\(\\)", relevance: 0),
      Mode(className: "comment", begin: "\\(\\*", end: "\\*\\)", contains: [
        Mode(self: true),
        PHRASAL_WORDS_MODE,
        Mode(
            className: "doctag",
            begin: "(?:TODO|FIXME|NOTE|BUG|XXX):",
            relevance: 0)
      ]),
      Mode(className: "symbol", begin: "'[A-Za-z_](?!')[\\w']*"),
      Mode(className: "type", begin: "`[A-Z][\\w']*"),
      Mode(className: "type", begin: "\\b[A-Z][\\w']*", relevance: 0),
      Mode(begin: "[a-z_]\\w*'[\\w']*"),
      Mode(
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [BACKSLASH_ESCAPE],
          relevance: 0),
      Mode(
          className: "string",
          begin: "\"",
          end: "\"",
          illegal: null,
          contains: [BACKSLASH_ESCAPE]),
      Mode(
          className: "number",
          begin:
              "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0),
      Mode(begin: "[-=]>")
    ]);
