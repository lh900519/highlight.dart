// GENERATED CODE - DO NOT MODIFY BY HAND

import '../src/mode.dart';
import '../src/common_modes.dart';

final angelscript = Mode(
    refs: {
      [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '7',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '0',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '1',
      ].join(): Mode(className: "symbol", begin: "[a-zA-Z0-9_]+@", contains: [
        Mode(
            ref: [
          '~',
          'c',
          'o',
          'n',
          't',
          'a',
          'i',
          'n',
          's',
          '~',
          '7',
          '~',
          'c',
          'o',
          'n',
          't',
          'a',
          'i',
          'n',
          's',
          '~',
          '0',
        ].join())
      ]),
      [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '7',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '0',
      ].join(): Mode(className: "keyword", begin: "<", end: ">", contains: [
        Mode(
            ref: [
          '~',
          'c',
          'o',
          'n',
          't',
          'a',
          'i',
          'n',
          's',
          '~',
          '7',
        ].join()),
        Mode(
            ref: [
          '~',
          'c',
          'o',
          'n',
          't',
          'a',
          'i',
          'n',
          's',
          '~',
          '7',
          '~',
          'c',
          'o',
          'n',
          't',
          'a',
          'i',
          'n',
          's',
          '~',
          '0',
          '~',
          'c',
          'o',
          'n',
          't',
          'a',
          'i',
          'n',
          's',
          '~',
          '1',
        ].join())
      ]),
      [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '7',
      ].join(): Mode(
          className: "built_in",
          begin:
              "\\b(void|bool|int|int8|int16|int32|int64|uint|uint8|uint16|uint32|uint64|string|ref|array|double|float|auto|dictionary)",
          contains: [
            Mode(
                ref: [
              '~',
              'c',
              'o',
              'n',
              't',
              'a',
              'i',
              'n',
              's',
              '~',
              '7',
              '~',
              'c',
              'o',
              'n',
              't',
              'a',
              'i',
              'n',
              's',
              '~',
              '0',
            ].join())
          ]),
    },
    aliases: ["asc"],
    keywords: [
      'f',
      'o',
      'r',
      ' ',
      'i',
      'n',
      '|',
      '0',
      ' ',
      'b',
      'r',
      'e',
      'a',
      'k',
      ' ',
      'c',
      'o',
      'n',
      't',
      'i',
      'n',
      'u',
      'e',
      ' ',
      'w',
      'h',
      'i',
      'l',
      'e',
      ' ',
      'd',
      'o',
      '|',
      '0',
      ' ',
      'r',
      'e',
      't',
      'u',
      'r',
      'n',
      ' ',
      'i',
      'f',
      ' ',
      'e',
      'l',
      's',
      'e',
      ' ',
      'c',
      'a',
      's',
      'e',
      ' ',
      's',
      'w',
      'i',
      't',
      'c',
      'h',
      ' ',
      'n',
      'a',
      'm',
      'e',
      's',
      'p',
      'a',
      'c',
      'e',
      ' ',
      'i',
      's',
      ' ',
      'c',
      'a',
      's',
      't',
      ' ',
      'o',
      'r',
      ' ',
      'a',
      'n',
      'd',
      ' ',
      'x',
      'o',
      'r',
      ' ',
      'n',
      'o',
      't',
      ' ',
      'g',
      'e',
      't',
      '|',
      '0',
      ' ',
      'i',
      'n',
      ' ',
      'i',
      'n',
      'o',
      'u',
      't',
      '|',
      '1',
      '0',
      ' ',
      'o',
      'u',
      't',
      ' ',
      'o',
      'v',
      'e',
      'r',
      'r',
      'i',
      'd',
      'e',
      ' ',
      's',
      'e',
      't',
      '|',
      '0',
      ' ',
      'p',
      'r',
      'i',
      'v',
      'a',
      't',
      'e',
      ' ',
      'p',
      'u',
      'b',
      'l',
      'i',
      'c',
      ' ',
      'c',
      'o',
      'n',
      's',
      't',
      ' ',
      'd',
      'e',
      'f',
      'a',
      'u',
      'l',
      't',
      '|',
      '0',
      ' ',
      'f',
      'i',
      'n',
      'a',
      'l',
      ' ',
      's',
      'h',
      'a',
      'r',
      'e',
      'd',
      ' ',
      'e',
      'x',
      't',
      'e',
      'r',
      'n',
      'a',
      'l',
      ' ',
      'm',
      'i',
      'x',
      'i',
      'n',
      '|',
      '1',
      '0',
      ' ',
      'e',
      'n',
      'u',
      'm',
      ' ',
      't',
      'y',
      'p',
      'e',
      'd',
      'e',
      'f',
      ' ',
      'f',
      'u',
      'n',
      'c',
      'd',
      'e',
      'f',
      ' ',
      't',
      'h',
      'i',
      's',
      ' ',
      's',
      'u',
      'p',
      'e',
      'r',
      ' ',
      'i',
      'm',
      'p',
      'o',
      'r',
      't',
      ' ',
      'f',
      'r',
      'o',
      'm',
      ' ',
      'i',
      'n',
      't',
      'e',
      'r',
      'f',
      'a',
      'c',
      'e',
      ' ',
      'a',
      'b',
      's',
      't',
      'r',
      'a',
      'c',
      't',
      '|',
      '0',
      ' ',
      't',
      'r',
      'y',
      ' ',
      'c',
      'a',
      't',
      'c',
      'h',
      ' ',
      'p',
      'r',
      'o',
      't',
      'e',
      'c',
      't',
      'e',
      'd',
      ' ',
      'e',
      'x',
      'p',
      'l',
      'i',
      'c',
      'i',
      't',
      ' ',
      'p',
      'r',
      'o',
      'p',
      'e',
      'r',
      't',
      'y',
    ].join(),
    illegal: "(^using\\s+[A-Za-z0-9_\\.]+;\$|\\bfunctions*[^\\(])",
    contains: [
      Mode(
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [BACKSLASH_ESCAPE],
          relevance: 0),
      Mode(
          className: "string",
          begin: "\"",
          end: "\"",
          illegal: "\\n",
          contains: [BACKSLASH_ESCAPE],
          relevance: 0),
      Mode(className: "string", begin: "\"\"\"", end: "\"\"\""),
      C_LINE_COMMENT_MODE,
      C_BLOCK_COMMENT_MODE,
      Mode(
          beginKeywords: "interface namespace",
          end: "{",
          illegal: "[;.\\-]",
          contains: [Mode(className: "symbol", begin: "[a-zA-Z0-9_]+")]),
      Mode(beginKeywords: "class", end: "{", illegal: "[;.\\-]", contains: [
        Mode(className: "symbol", begin: "[a-zA-Z0-9_]+", contains: [
          Mode(
              begin: "[:,]\\s*",
              contains: [Mode(className: "symbol", begin: "[a-zA-Z0-9_]+")])
        ])
      ]),
      Mode(
          ref: [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '7',
      ].join()),
      Mode(
          ref: [
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '7',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '0',
        '~',
        'c',
        'o',
        'n',
        't',
        'a',
        'i',
        'n',
        's',
        '~',
        '1',
      ].join()),
      Mode(className: "literal", begin: "\\b(null|true|false)"),
      Mode(
          className: "number",
          begin:
              "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)")
    ]);
